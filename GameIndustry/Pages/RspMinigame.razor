@page "/rsp"
@using System.Timers
@using GameIndustry.Helpers

@implements IDisposable

<div class="row text-center">
    <div class="">
        <h1 class="text-success">RSP minigame</h1>
    </div>
</div>    

@if (!string.IsNullOrWhiteSpace(gameResultMessage))
{
    <div class="row">
        <div class="col text-center alert alert-@resultStyle">
            <h3>@gameResultMessage</h3>
        </div>
    </div>
}

<div class="row text-center">
    <div class="col mb-5 justify-content-center">
        <img src="@opponent.Image" class="general-image" />
    </div>
</div>

<div class="row text-center">
    <div class="col mb-5 justify-content-center">
        <button class="btn btn-primary" @onclick="ResetGame">Start New Game</button>
    </div>
</div>

<div class="row text-center justify-content-around">
   @* <div class="col">
        <img src="./Images/paper.png" class="general-image hovered-image" />
    </div>
    <div class="col">
        <img src="./Images/scissors.png" class="general-image hovered-image" />
    </div>
    <div class="col">
        <img src="./Images/rock.png" class="general-image hovered-image" />
    </div>*@
    @foreach (var item in games)
    {
        <img src="@item.Image" class="general-image hovered-image" @onclick="(()=>SelectingHandler(item))"/>
    }
</div>

@code {
    List<GameHendler> games = new List<GameHendler>()
    {
        new GameHendler{Choose = RSPOptions.Paper, LosseCondition = RSPOptions.Scissors, WinCondition = RSPOptions.Rock, Image="./Images/paper.png"},
        new GameHendler{Choose = RSPOptions.Rock, LosseCondition = RSPOptions.Paper, WinCondition = RSPOptions.Scissors, Image="./Images/rock.png"},
        new GameHendler{Choose = RSPOptions.Scissors, LosseCondition = RSPOptions.Rock, WinCondition = RSPOptions.Paper, Image="./Images/scissors.png"}
    };

    Timer timer;
    GameHendler opponent;
    Random rnd;
    string gameResultMessage = string.Empty;
    string resultStyle = string.Empty;

    protected override void OnInitialized()
    {
        opponent = games[0];
        rnd = new Random(DateTime.Now.Millisecond);

        timer = new Timer();
        timer.Interval = 100;
        timer.Elapsed += ElapsedTimer;
        timer.Start();
    }

    int imageIndex = 0;

    async void ElapsedTimer(object sender, ElapsedEventArgs args)
    {
        imageIndex = rnd.Next(0, games.Count);
        opponent = games[imageIndex];
        await InvokeAsync(StateHasChanged);
    }

    void SelectingHandler(GameHendler game)
    {
        timer.Stop();
        GameState gameResult = game.GameResult(opponent);

        switch(gameResult)
        {
            case GameState.Victory:
                gameResultMessage = "Congratulation! You WON!";
                resultStyle = "success";
                break;
            case GameState.Loss:
                gameResultMessage = "Fail You LOST!";
                resultStyle = "danger";
                break;
            case GameState.Draw:
                gameResultMessage = "Drow! Congratulation to both!";
                resultStyle = "warning";
                break;
            default:
                break;
        }
    }

    void ResetGame()
    {
        timer.Start();
        gameResultMessage = string.Empty;
        resultStyle = string.Empty;
    }

    public void Dispose()
    {
        if (timer != null)
            timer.Dispose();
    }
}
