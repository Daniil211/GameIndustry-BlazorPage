using DbAccess;
using GameIndustry_v2.Data;
using GameIndustry_v2.Data.Repository;
using Microsoft.EntityFrameworkCore;
using Tewr.Blazor.FileReader;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseMySql(builder.Configuration["ConnectionStrings:DbConnection"], new MySqlServerVersion(new Version(8, 0, 25)),
        options => options.EnableRetryOnFailure())
);

// Add services to the container.
builder.Services.AddRazorPages();
builder.Services.AddServerSideBlazor();
builder.Services.AddSingleton<WeatherForecastService>();
builder.Services.AddAntDesign();
builder.Services.AddScoped<IRepository, SqlGameRepository>();
//builder.Services.AddSingleton<IRepository, MockGamesRepository>();
//Если у вас не отображает ваши изменения  после создания новой игры
//-то там где мы подключали   в сервисы IRepository, замените AddTransient на AddSingletone ,незачто


//Не стоит так делать, ибо Singleton создаёт один экземпляр сервиса на всех.
//Просто обновите данные в массиве с играми. Не забывайте, что в базу добавляется новая игра, а вот массив, из которого выводим данные 
//сам не обновится. Поэтому делаем повторный запрос на получения всех данных из базы и всё будет отображаться.

//ну мы же "подменяем БД" в реальном кейсе мы бы обращались к ней, и брали от туда все, я
//просто делал все как у вас и у меня не отрисовывало новую игру ,а страничку обновляло, я прошел дебагом и понял что на выходе
//оно получает "5ую" игу  но когда обращаеться к нашей  "БД" то оно не обновляет существующий экземпляр,а делает новый на 4 элемента...
builder.Services.AddFileReaderService(options => options.InitializeOnFirstCall = true);

var app = builder.Build();

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Error");
    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
    app.UseHsts();
}

app.UseHttpsRedirection();

app.UseStaticFiles();

app.UseRouting();

app.MapBlazorHub();
app.MapFallbackToPage("/_Host");

app.Run();
